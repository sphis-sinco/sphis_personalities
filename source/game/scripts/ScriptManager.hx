package game.scripts;

import game.scripts.events.AddedEvent;
#if !html5
import crowplexus.iris.Iris;
import crowplexus.iris.IrisConfig;
import game.desktop.DesktopMain;
import game.desktop.DesktopPlay;
import game.levels.LevelModule;
import game.levels.LevelSpriteGroup;
import game.modding.ModList;
import game.modding.ModMenu;
import game.modding.PolymodHandler;
import game.scripts.events.BaseEvent;
import game.scripts.events.BaseStateEvent;
import game.scripts.events.CreateEvent;
import game.scripts.events.UpdateEvent;
import game.scripts.imports.FlxScriptedAxes;
import game.scripts.imports.FlxScriptedColor;
import game.scripts.imports.FlxTextScriptedBorderStyle;
import game.scripts.imports.ScriptedThxSemverVersion;
import lime.app.Application;
import lime.system.Clipboard;

class ScriptManager
{
	public static var isWeb(default, null):Bool = false;

	public static var SCRIPT_FOLDER:String = 'scripts';

	public static var SCRIPT_EXTS:Array<String> = ['hx'];

	public static var SCRIPT_FOLDERS:Array<String> = [
		#if !disable_polymodSupport
		'mods/',
		#end
		Paths.getGamePath('game/'),
		'game/'
	];

	public static var SCRIPTS:Array<Iris> = [];
	public static var SCRIPTS_ERRS:Map<String, Dynamic> = [];
	public static var GIANT_SCRIPT_FILE:String = '';

	// #region functions4scripts
	public static function setVariableContains(needToContain:String, variable:Dynamic, newValue:Dynamic)
	{
		for (script in SCRIPTS)
		{
			if (StringTools.contains(script.name, needToContain))
			{
				if (script.exists(variable))
					script.set(variable, newValue);
			}
		}
	}

	public static function getVariableContains(needToContain:String, variable:Dynamic):Dynamic
	{
		for (script in SCRIPTS)
		{
			if (StringTools.contains(script.name, needToContain))
				if (script.exists(variable))
					return script.get(variable);
		}

		return null;
	}

	public static function setVariable(scriptPath:String, variable:Dynamic, newValue:Dynamic)
	{
		for (script in SCRIPTS)
		{
			if (script.name == scriptPath || script.name == Paths.getGamePath(scriptPath))
				if (script.exists(variable))
					script.set(variable, newValue);
		}
	}

	public static function getVariable(scriptPath:String, variable:Dynamic):Dynamic
	{
		for (script in SCRIPTS)
		{
			if (script.name == scriptPath || script.name == Paths.getGamePath(scriptPath))
				if (script.exists(variable))
					return script.get(variable);
		}

		return null;
	}

	public static function call(method:String, ?args:Array<Dynamic>)
	{
		if (method == null)
			return;
		if (SCRIPTS.length < 1)
			return;

		for (script in SCRIPTS)
		{
			callSingular(script, method, args);
		}
	}

	public static function callSingular(script:Iris, method:String, ?args:Array<Dynamic>)
	{
		if (method == null)
			return;

		if (!script.exists(method))
		{
			var errMsg = Ansi.fg('missing method(-method) for script(-script.config.name)', RED);

			errMsg = StringTools.replace(errMsg, '-method', Ansi.fg(method, ORANGE) + Ansi.fg('', RED));
			errMsg = StringTools.replace(errMsg, '-script.config.name', Ansi.fg(script.config.name, ORANGE) + Ansi.fg('', RED));

			if (!SCRIPTS_ERRS.exists('missing_method(' + method + ')_' + script.config.name))
			{
				SCRIPTS_ERRS.set('missing_method(' + method + ')_' + script.config.name, Ansi.stripColor(errMsg));
				if (!Defines.get('scripts_ignoreMissingMethods'))
					trace(errMsg + Ansi.reset(''));
			}

			return;
		}

		var ny:Dynamic = script.get(method);
		try
		{
			if (ny != null && Reflect.isFunction(ny))
			{
				script.call(method, args);
			}
		}
		catch (e)
		{
			var errMsg = Ansi.fg('error calling method(-method) for script(-script.config.name): ', RED) + Ansi.fg(e.message, ORANGE);

			errMsg = StringTools.replace(errMsg, '-method', Ansi.fg(method, ORANGE) + Ansi.fg('', RED));
			errMsg = StringTools.replace(errMsg, '-script.config.name', Ansi.fg(script.config.name, ORANGE) + Ansi.fg('', RED));

			if (!SCRIPTS_ERRS.exists('method(' + method + ')_error_' + script.config.name))
			{
				SCRIPTS_ERRS.set('method(' + method + ')_error_' + script.config.name, Ansi.stripColor(errMsg));
				if (!Defines.get('scripts_ignoreMethodErrors'))
					trace(errMsg + Ansi.reset(''));
			}
		}
	}

	// #endregion
	// #region web script
	public static function generateWebScript()
	{
		checkForUpdatedScripts();

		GIANT_SCRIPT_FILE = 'package game.scripts; /* Generated by the ScriptManager :) */\n';

		var temp_giant_script_file = '';
		var add:Array<String> = [];
		var imports:Array<String> = [];
		var variables:Array<String> = [];

		for (script in SCRIPTS)
		{
			if (!StringTools.contains(script.name, 'TemplateScript'))
			{
				@:privateAccess {
					add = script.scriptCode.split('\n');
				}

				var inFunc = false;

				for (thing in add)
				{
					var addThing = StringTools.replace(thing, '\t', '');
					addThing += '\n';

					if (StringTools.startsWith(addThing, 'function'))
					{
						addThing = StringTools.replace(addThing, 'function', 'public static function');

						inFunc = true;
					}
					if (StringTools.endsWith(addThing, '}') && inFunc)
						inFunc = false;

					if (StringTools.startsWith(addThing, 'import') && !imports.contains(addThing))
						imports.push(addThing);
					else if (StringTools.startsWith(addThing, 'var') && !inFunc)
					{
						addThing = StringTools.replace(addThing, 'var', 'static var');

						if (!variables.contains(addThing))
							variables.push(addThing);
					}
					else
					{
						if (StringTools.startsWith(addThing, 'import'))
							addThing = '';
						temp_giant_script_file += addThing;
					}
				}
			}
		}

		var imported = [];
		for (importThing in imports)
		{
			if (!StringTools.contains(GIANT_SCRIPT_FILE, importThing))
				if (!imported.contains(importThing))
				{
					imported.push(importThing);
					GIANT_SCRIPT_FILE += importThing;
				}
		}

		GIANT_SCRIPT_FILE += 'class WebScripts {\n';

		var varsInitalized = [];
		for (varThing in variables)
		{
			if (!StringTools.contains(GIANT_SCRIPT_FILE, varThing))
				if (!varsInitalized.contains(varThing.split(':')[0]))
				{
					varsInitalized.push(varThing.split(':')[0]);
					GIANT_SCRIPT_FILE += varThing;
				}
		}
		GIANT_SCRIPT_FILE += temp_giant_script_file;
		GIANT_SCRIPT_FILE += '\n}';

		trace('Giant script file (for web shit): ');
		#if sys
		Sys.println(GIANT_SCRIPT_FILE);
		#else
		trace(GIANT_SCRIPT_FILE);
		#end

		try
		{
			Clipboard.text = GIANT_SCRIPT_FILE;
		}
		catch (_)
		{
			trace('Clipboard modif failed');
		}
	}

	// #endregion
	// #region load script
	public static function loadScriptByPath(path:String):Bool
	{
		var newScript:Iris;

		var noExt:Int = 0;
		for (ext in SCRIPT_EXTS)
		{
			if (!StringTools.endsWith(path, '.' + ext))
				noExt++;
		}
		if (noExt >= SCRIPT_EXTS.length)
			return false;

		try
		{
			newScript = new Iris(Paths.getText(path), new IrisConfig(path, true, true, []));
		}
		catch (e)
		{
			newScript = null;
			if (Defines.get('scripts_loadedScriptMSG'))
				trace(Ansi.fg('', RED)
					+ 'Error loading script('
					+ Ansi.fg(path, ORANGE)
					+ Ansi.fg('', RED)
					+ '): '
					+ e.message
					+ Ansi.reset(''));
			Application.current.window.alert('Error loading script(' + path + '): ' + e.message + '\n\n' + e.details, 'Error loading script');
		}

		if (newScript != null)
		{
			initalizeScriptVariables(newScript);

			if (Defines.get('scripts_loadedScriptMSG'))
				trace('Loaded script(' + Ansi.fg(path, ORANGE) + Ansi.reset('') + ')');

			SCRIPTS.push(newScript);

			return true;
		}

		return false;
	}

	// #endregion
	// #region script imports
	public static function initalizeScriptVariables(script:Iris)
	{
		script.set('DesktopPlay', DesktopPlay, false);
		script.set('DesktopMain', DesktopMain, false);

		script.set('InitState', InitState, false);
		script.set('BlankState', BlankState, false);

		script.set('Mouse', Mouse, false);
		script.set('MouseStates', MouseStates, false);

		script.set('BaseEvent', BaseEvent, false);
		script.set('BaseStateEvent', BaseStateEvent, false);
		script.set('AddedEvent', AddedEvent, false);
		script.set('CreateEvent', CreateEvent, false);
		script.set('UpdateEvent', UpdateEvent, false);

		script.set('LevelModule', LevelModule, false);
		script.set('LevelSpriteGroup', LevelSpriteGroup, false);

		script.set('ScriptManager', ScriptManager, false);
		script.set('Paths', Paths, false);
		script.set('Controls', Controls, false);
		script.set('Ansi', Ansi, false);
		script.set('Defines', Defines, false);
		script.set('GameVersion', GameVersion, false);

		script.set('PolymodHandler', PolymodHandler, false);
		script.set('ModMenu', ModMenu, false);
		script.set('ModList', ModList, false);

		scriptImports(script);
	}

	static function scriptImports(script:Iris)
	{
		script.set('Version', ScriptedThxSemverVersion, false);
		script.set('FlxScriptedColor', FlxScriptedColor, false);
		script.set('FlxScriptedAxes', FlxScriptedAxes, false);
		script.set('FlxTextScriptedBorderStyle', FlxTextScriptedBorderStyle, false);
	}

	// #endregion

	public static function loadScriptsByPaths(paths:Array<String>)
	{
		for (path in paths)
			loadScriptByPath(path);
	}

	public static function getAllScriptPaths(?foundFilesFunction:(Array<Dynamic>, String) -> Void = null):Array<String>
	{
		#if sys
		return Paths.getTypeArray('script', SCRIPT_FOLDER, SCRIPT_EXTS, SCRIPT_FOLDERS, foundFilesFunction);
		#else
		return [];
		#end
	}

	public static function checkForUpdatedScripts()
	{
		if (Defines.get('scripts_disableScripts'))
			return;

		var scriptsString = [];
		var deletedScripts = [];
		var updatedScripts = [];
		for (script in SCRIPTS)
		{
			scriptsString.push(script.name);
			var path = script.name;

			@:privateAccess {
				// #region removed/updated

				/**
				 * 
				 */

				// #region script(s)
				// #endregion
				if (!Paths.pathExists(script.name))
				{
					trace('script(' + script.name + ') has been removed');
					deletedScripts.push(script.name);
					script.destroy();
					SCRIPTS.remove(script);
				}
				else
				{
					if (Paths.getText(path) != script.scriptCode)
					{
						trace('script(' + script.name + ') had an update');
						updatedScripts.push(path);
						var scriptLayer:Int = 0;

						script.destroy();
						SCRIPTS.remove(script);

						var newScript = (loadScriptByPath(path)) ? SCRIPTS[SCRIPTS.length - 1] : null;

						if (newScript != null)
						{
							SCRIPTS.insert(scriptLayer, newScript);
							SCRIPTS.remove(SCRIPTS[SCRIPTS.length - 1]);
						}
					}
				}
				// #endregion
			}
		}

		var ogFiles:Array<String> = getAllScriptPaths(function(arr, type) {});
		var needToAdd:Array<String> = [];

		var addition = '';
		var newCount = 0;

		// #region scriptfiles parsing
		getAllScriptPaths(function(arr, type)
		{
			for (script in deletedScripts)
				arr.push(script);

			for (file in ogFiles)
				if (!scriptsString.contains(file))
				{
					newCount++;
					needToAdd.push(file);
				}

			var newText = ((newCount > 0) ? (Ansi.fg(' (' + newCount + ' new)', GREEN)) : '');
			if (Defines.get('typeArray_foundfilesfunc_traces'))
				trace('Found ' + arr.length + ' ' + type + ' file(s)' + newText + ':');

			var i = 0;
			for (file in arr)
			{
				final ogFile = ogFiles[i];

				addition = Ansi.fg('(loaded)', ORANGE);
				if (!scriptsString.contains(ogFile))
				{
					addition = Ansi.fg('(new)', RED);
					if (!scriptsString.contains(ogFile))
						scriptsString.push(ogFile);
				}

				if (deletedScripts.contains(ogFile) && deletedScripts.contains(file))
					addition = Ansi.fg('(removed)', BLACK);
				if ((updatedScripts.contains(ogFile) || updatedScripts.contains(file))
					|| (scriptsString.contains(ogFile) && !scriptsString.contains(file)))
				{
					if (!scriptsString.contains(file))
						scriptsString.push(file);
					addition = Ansi.fg('(updated)', CYAN);
				}

				if (StringTools.contains(file, 'mods/'))
				{
					addition = StringTools.replace(addition, ')', '/' + Ansi.fg('modfile', GREEN) + ')');
				}

				if (Defines.get('typeArray_foundfilesfunc_traces'))
					trace(' * ' + Ansi.fg(file, ORANGE) + ' ' + addition + Ansi.reset(''));

				i++;
			}

			loadScriptsByPaths(needToAdd);

			for (script in SCRIPTS.filter(f ->
			{
				return needToAdd.contains(f.name);
			}))
			{
				callSingular(script, 'onAdded', [new AddedEvent(script.name)]);
			}

			for (script in deletedScripts)
				arr.remove(script);
		});
		// #endregion
	}
}
#else
class ScriptManager
{
	// #region web stuff only
	public static var isWeb(default, null):Bool = true;

	public static var SCRIPT_EXTS:Array<String> = ['hx'];

	public static function call(method:String, ?args:Array<Dynamic>)
	{
		switch (method)
		{
			case 'onAdded':
				WebScripts.onAdded(args[0]);
			case 'onCreate':
				WebScripts.onCreate(args[0]);
			case 'onUpdate':
				WebScripts.onUpdate(args[0]);
		}
	}

	public static function checkForUpdatedScripts()
	{
		call('onAdded', [new AddedEvent('WebScript')]);
	}

	// #endregion
}
#end
