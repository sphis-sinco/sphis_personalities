package game.scripts; /* Generated by the ScriptManager :) */

import flixel.FlxG;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.FlxSprite;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import flixel.util.FlxTimer;
import game.Mouse;
import game.MouseStates;
import game.Paths;
import game.Paths;
import game.desktop.DesktopMain;
import game.desktop.DesktopMain;
import game.desktop.DesktopPlay;
import game.desktop.DesktopPlay;
import game.desktop.play.LevelModule;
import game.scripts.ScriptManager;
import game.scripts.ScriptManager;
import game.scripts.events.AddedEvent;
import game.scripts.events.AddedEvent;
import game.scripts.events.CreateEvent;
import game.scripts.events.CreateEvent;
import game.scripts.events.UpdateEvent;
import game.scripts.events.UpdateEvent;
import game.scripts.imports.FlxScriptedAxes;
import game.scripts.imports.FlxScriptedColor;
import game.scripts.imports.FlxScriptedColor;

class WebScripts
{
	static var moving:Bool = false;
	static var hisHead:FlxSprite;
	static var transitioning = false;
	static var haxenIdleStates = [];
	static var scanlineLayerOne:FlxSprite;
	static var scanlineLayerTwo:FlxSprite;
	static var scanlineAcceptedStates = ['desktop-main', 'desktop-play'];
	static var scanlineAngle = FlxG.random.float(0, 360);
	static var leftArrow:FlxSprite;
	static var rightArrow:FlxSprite;
	static var arrowsnotLeaving:Bool;
	static var savedSelection:Int;
	static var level_one:LevelModule;
	static var is_level_one:Bool;

	public static function onCreate(event:CreateEvent)
	{
		moving = true;
		if (event.state == 'desktop-main')
		{
			var startingYPositions = [
				DesktopMain.instance.haxenStartingYPosition,
				DesktopMain.instance.option_play.getPosition().y,
				DesktopMain.instance.option_options.getPosition().y
			];

			DesktopMain.instance.haxen.y = FlxG.height + DesktopMain.instance.haxen.height;
			DesktopMain.instance.option_play.y = FlxG.height + DesktopMain.instance.option_play.height;
			DesktopMain.instance.option_options.y = FlxG.height + DesktopMain.instance.option_options.height;

			DesktopMain.instance.haxen.alpha = 0;
			DesktopMain.instance.option_play.alpha = 0;
			DesktopMain.instance.option_options.alpha = 0;

			FlxTween.tween(DesktopMain.instance.haxen, {alpha: 0.75, y: startingYPositions[0]}, 1, {
				ease: FlxEase.sineInOut,
				startDelay: 0.5,
				onComplete: _ ->
				{
					moving = false;
				}
			});

			FlxTween.tween(DesktopMain.instance.option_play, {alpha: 0.5, y: startingYPositions[1]}, 1, {
				ease: FlxEase.sineInOut,
				startDelay: 0.1,
			});
			FlxTween.tween(DesktopMain.instance.option_options, {alpha: 0.5, y: startingYPositions[2]}, 1, {
				ease: FlxEase.sineInOut
			});
		}
	}

	public static function onUpdate(event:UpdateEvent)
	{
		if (event.state == 'desktop-main')
		{
			if (!moving)
			{
				DesktopMain.instance.option_play.alpha = 0.5;
				DesktopMain.instance.option_options.alpha = 0.5;
			}

			if (Mouse.overlaps(DesktopMain.instance.option_play))
			{
				if (!moving)
					DesktopMain.instance.option_play.alpha = 1;

				if (Mouse.justReleased && !moving)
				{
					FlxTimer.globalManager.clear();
					DesktopMain.instance.haxen_changeState('accept');
					moving = true;
					DesktopMain.instance.haxen.x -= (DesktopMain.instance.haxen.width / 10);
					DesktopMain.instance.haxen.y -= (DesktopMain.instance.haxen.height / 20);

					FlxTween.tween(DesktopMain.instance.haxen, {alpha: 1, y: FlxG.height + DesktopMain.instance.haxen.height}, 1, {
						ease: FlxEase.sineInOut,
						startDelay: 0.5,
						onComplete: tween ->
						{
							FlxG.switchState(() -> new DesktopPlay());
						}
					});

					FlxTween.tween(DesktopMain.instance.option_play, {alpha: 1, y: FlxG.height + DesktopMain.instance.option_play.height}, 1, {
						ease: FlxEase.sineInOut,
						startDelay: 0.1,
					});
					FlxTween.tween(DesktopMain.instance.option_options, {alpha: 1, y: FlxG.height + DesktopMain.instance.option_options.height}, 1, {
						ease: FlxEase.sineInOut
					});
				}
			}
			else if (Mouse.overlaps(DesktopMain.instance.option_options))
			{
				if (!moving)
				{
					DesktopMain.instance.option_options.alpha = 0.25;

					if (Mouse.pressed)
					{
						DesktopMain.instance.option_options.alpha = 0.125;
					}
				}
			}
		}
	}

	public static function onCreate(event:CreateEvent)
	{
		if (event.state == 'z-easter-egg')
		{
			hisHead = new FlxSprite();
			hisHead.loadGraphic(Paths.getImagePath('desktop/easterEgg/hisHead'));
			FlxG.state.add(hisHead);
		}
	}

	public static function onUpdate(event:UpdateEvent)
	{
		if (FlxG.keys.justReleased.ESCAPE && event.state == 'z-easter-egg')
		{
			FlxG.switchState(() -> new DesktopMain());
		}
	}

	public static function onCreate(event:UpdateEvent)
	{
		transitioning = false;

		if (event.state == 'z-easter-egg')
		{
			FlxG.camera.fade(FlxScriptedColor.BLACK, 1, true, null);
		}
	}

	public static function onUpdate(event:UpdateEvent)
	{
		if (!transitioning && (FlxG.keys.justReleased.F1 || (FlxG.keys.pressed.SHIFT && FlxG.keys.justReleased.ONE)))
		{
			if (event.state != 'z-easter-egg')
			{
				transitioning = true;

				if (event.state == 'desktop-main' || event.state == 'desktop-play')
				{
					FlxG.camera.fade(FlxScriptedColor.BLACK, 1, false, () ->
					{
						FlxG.switchState(() -> new BlankState('z-easter-egg'));
					});
				}
				else
					FlxG.switchState(() -> new BlankState('z-easter-egg'));
			}
		}
	}

	public static function onAdded(event:AddedEvent)
	{
		haxenIdleStates.push(Paths.getImagePath('desktop/haxen/idle-left'));
		haxenIdleStates.push(Paths.getImagePath('desktop/haxen/idle-right'));
	}

	public static function onUpdate(event:UpdateEvent)
	{
		if (event.state == 'desktop-main')
		{
			if (DesktopMain.instance.haxen.y == DesktopMain.instance.haxenStartingYPosition)
				DesktopMain.instance.haxen.alpha = 0.75;
			if (Mouse.overlaps(DesktopMain.instance.haxen) && DesktopMain.instance.haxen.y == DesktopMain.instance.haxenStartingYPosition)
			{
				DesktopMain.instance.haxen.alpha = 1;

				if (Mouse.pressed)
					Mouse.setMouseState(MouseStates.SELECTED);
				if (Mouse.justReleased && haxenIdleStates.contains(DesktopMain.instance.haxen.graphic.key))
				{
					DesktopMain.instance.haxen_changeState('boop');
					new FlxTimer().start(1, function(tmr)
					{
						DesktopMain.instance.haxen_idle();
					});
				}
			}
		}
	}

	public static function onCreate(event:CreateEvent)
	{
		scanlineLayerOne = new FlxSprite();
		scanlineLayerOne.loadGraphic(Paths.getImagePath('LCD/scanlines'));
		scanlineLayerOne.screenCenter();
		scanlineLayerOne.scrollFactor.set(0, 0);

		scanlineLayerTwo = new FlxSprite();
		scanlineLayerTwo.loadGraphic(Paths.getImagePath('LCD/scanlines'));
		scanlineLayerTwo.screenCenter();
		scanlineLayerTwo.scrollFactor.set(0, 0);

		if (scanlineAcceptedStates.contains(event.state))
		{
			switch (event.state)
			{
				case 'desktop-main':
					DesktopMain.instance.scanlineLayer.add(scanlineLayerOne);
					DesktopMain.instance.scanlineLayer.add(scanlineLayerTwo);
				case 'desktop-play':
					DesktopPlay.instance.scanlineLayer.add(scanlineLayerOne);
					DesktopPlay.instance.scanlineLayer.add(scanlineLayerTwo);
			}
		}
	}

	public static function onUpdate(event:UpdateEvent)
	{
		if (scanlineLayerOne != null)
		{
			scanlineAngle += (1 / FlxG.random.int(10, 100));
			scanlineLayerOne.angle = scanlineAngle;
			scanlineLayerOne.alpha = FlxG.random.float(0, 0.2);
			scanlineLayerTwo.angle = scanlineAngle + 90;
			scanlineLayerTwo.alpha = scanlineLayerOne.alpha;
		}
	}

	public static function onCreate(event:CreateEvent)
	{
		if (event.state == 'desktop-play')
		{
			DesktopPlay.instance.levels.push('level1');
			DesktopPlay.instance.levels.push('level2');
		}
	}

	public static function onCreate(event:CreateEvent)
	{
		if (event.state == 'desktop-play')
		{
			arrowsnotLeaving = true;
			if (leftArrow == null)
			{
				leftArrow = new FlxSprite();
				leftArrow.loadGraphic(Paths.getImagePath('levels/desktop-icons/select-arrow'));
				leftArrow.flipX = true;

				leftArrow.scale.set(.25, .25);
				leftArrow.updateHitbox();

				leftArrow.screenCenter(FlxScriptedAxes.Y);
				leftArrow.x = 32;

				leftArrow.scrollFactor.set(0, 0);
			}
			if (rightArrow == null)
			{
				rightArrow = new FlxSprite();
				rightArrow.loadGraphic(Paths.getImagePath('levels/desktop-icons/select-arrow'));

				rightArrow.scale.set(.25, .25);
				rightArrow.updateHitbox();

				rightArrow.scrollFactor.set(0, 0);
			}

			leftArrow.alpha = 0;
			rightArrow.alpha = 0;

			FlxTween.tween(leftArrow, {alpha: 1}, 1, {
				ease: FlxEase.sineInOut
			});
			FlxTween.tween(rightArrow, {alpha: 1}, 1, {
				ease: FlxEase.sineInOut
			});

			FlxG.state.add(leftArrow);
			FlxG.state.add(rightArrow);
		}
	}

	public static function onUpdate(event:UpdateEvent)
	{
		if (event.state == 'desktop-play')
		{
			leftArrow.scale.set(.25, .25);
			rightArrow.scale.set(.25, .25);

			if (Controls.getControlPressed('ui_left') && arrowsnotLeaving)
			{
				if (DesktopPlay.instance.curSel > 0)
					leftArrow.scale.set(.3, .15);
				else
					leftArrow.scale.set(.15, .3);
			}
			if (Controls.getControlPressed('ui_right') && arrowsnotLeaving)
			{
				if (DesktopPlay.instance.curSel < DesktopPlay.instance.levels.length - 1)
					rightArrow.scale.set(.3, .15);
				else
					rightArrow.scale.set(.15, .3);
			}
			if (arrowsnotLeaving && Controls.getControlJustReleased('ui_leave'))
			{
				arrowsnotLeaving = false;

				FlxTween.tween(leftArrow, {alpha: 0}, 1, {
					ease: FlxEase.sineInOut
				});
				FlxTween.tween(rightArrow, {alpha: 0}, 1, {
					ease: FlxEase.sineInOut
				});
			}
			if (arrowsnotLeaving)
			{
				rightArrow.screenCenter(FlxScriptedAxes.Y);
				rightArrow.x = FlxG.width - rightArrow.width - 32;
			}
		}
	}

	public static function onUpdate(event:UpdateEvent)
	{
		if ((savedSelection == null) && event.state == 'desktop-play' && Controls.getControlJustReleased('ui_leave'))
		{
			savedSelection = DesktopPlay.instance.curSel;
			for (obj in DesktopPlay.instance.levelsGrp.members)
			{
				obj.levelIcon.alpha = 1;
				FlxTween.tween(obj.levelIcon, {alpha: 0}, 1, {
					ease: FlxEase.sineInOut
				});
				obj.box.alpha = 1;
				FlxTween.tween(obj.box, {alpha: 0}, 1, {
					ease: FlxEase.sineInOut
				});
				obj.lock.alpha = 1;
				FlxTween.tween(obj.lock, {alpha: 0}, 1, {
					ease: FlxEase.sineInOut
				});
			}
			for (obj in DesktopPlay.instance.levelsTextGrp.members)
			{
				obj.alpha = 1;
				FlxTween.tween(obj, {alpha: 0}, 1, {
					ease: FlxEase.sineInOut
				});
			}

			new FlxTimer().start(1, tmr ->
			{
				savedSelection = null;
				FlxG.switchState(() -> new DesktopMain());
			});
		}

		if (savedSelection != null && DesktopPlay.instance.curSel != savedSelection)
			DesktopPlay.instance.curSel = savedSelection;
	}

	public static function onCreate(event:CreateEvent)
	{
		if (event.state == 'desktop-play')
		{
			DesktopPlay.instance.reloadLevels((levelsGrp, levelsTextGrp) ->
			{
				for (obj in levelsGrp.members)
				{
					obj.levelIcon.alpha = 0;
					FlxTween.tween(obj.levelIcon, {alpha: 1}, 1, {
						ease: FlxEase.sineInOut
					});
					obj.box.alpha = 0;
					FlxTween.tween(obj.box, {alpha: 1}, 1, {
						ease: FlxEase.sineInOut
					});
					obj.lock.alpha = 0;
					FlxTween.tween(obj.lock, {alpha: 1}, 1, {
						ease: FlxEase.sineInOut
					});
				}
				for (obj in levelsTextGrp.members)
				{
					obj.alpha = 0;
					FlxTween.tween(obj, {alpha: 1}, 1, {
						ease: FlxEase.sineInOut
					});
				}
			});
		}
	}

	public static function onUpdate(event:UpdateEvent)
	{
		if (savedSelection != null && DesktopPlay.instance.curSel != savedSelection)
			DesktopPlay.instance.curSel = savedSelection;

		if ((savedSelection == null) && event.state == 'desktop-play')
		{
			if (Controls.getControlJustReleased('ui_accept'))
			{
				savedSelection = DesktopPlay.instance.curSel;

				var id = '';
				if (DesktopPlay.instance.levelMetas[savedSelection].id != null)
					id = DesktopPlay.instance.levelMetas[savedSelection].id;
				else
					id = DesktopPlay.instance.levels[savedSelection];

				FlxG.camera.fade(FlxScriptedColor.BLACK, 1, false, () ->
				{
					FlxG.switchState(() -> new BlankState(id));
				});
			}
		}
	}

	public static function onCreate(event:CreateEvent)
	{
		is_level_one = (event.state == 'level1');
		if (is_level_one)
		{
			level_one = new LevelModule(event.state);
			FlxG.camera.fade(FlxScriptedColor.BLACK, 1, true, () -> {});
		}
	}

	public static function onUpdate(event:UpdateEvent) {}

	public static function onAdded(event:AddedEvent) {}

	public static function onCreate(event:CreateEvent) {}

	public static function onUpdate(event:UpdateEvent) {}

	public static function onUpdate(event:UpdateEvent)
	{
		Mouse.setMouseState(MouseStates.IDLE);

		if (event.state == 'desktop-main' && DesktopMain.instance.haxen.y == DesktopMain.instance.haxenStartingYPosition)
		{
			if (Mouse.overlaps(DesktopMain.instance.option_play))
				Mouse.setMouseState(MouseStates.CAN_SELECT);
			if (Mouse.overlaps(DesktopMain.instance.haxen))
				Mouse.setMouseState(MouseStates.CAN_SELECT);

			if (Mouse.overlaps(DesktopMain.instance.option_options))
				Mouse.setMouseState(MouseStates.CANT_SELECT);
		}
		if (event.state == 'desktop-play')
		{
			Mouse.setMouseState(MouseStates.BLANK);
		}

		if (Mouse.pressed && Mouse.state == MouseStates.CAN_SELECT)
		{
			Mouse.setMouseState(MouseStates.SELECTED);
		}
	}

	public static function onUpdate(event:UpdateEvent)
	{
		if (FlxG.keys.justReleased.R)
		{
			ScriptManager.checkForUpdatedScripts();
		}
	}
}
