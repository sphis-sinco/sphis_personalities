package game.scripts; /* Generated by the ScriptManager :) */

import flixel.FlxG;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.FlxSprite;
import flixel.group.FlxGroup.FlxTypedGroup;
import flixel.text.FlxText;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import flixel.util.FlxTimer;
import game.Mouse;
import game.MouseStates;
import game.Paths;
import game.Paths;
import game.desktop.DesktopMain;
import game.desktop.DesktopMain;
import game.desktop.DesktopPlay;
import game.desktop.DesktopPlay;
import game.levels.LevelModule;
import game.modding.ModList;
import game.modding.ModMenu;
import game.scripts.ScriptManager;
import game.scripts.events.AddedEvent;
import game.scripts.events.AddedEvent;
import game.scripts.events.CreateEvent;
import game.scripts.events.CreateEvent;
import game.scripts.events.UpdateEvent;
import game.scripts.events.UpdateEvent;
import game.scripts.imports.FlxScriptedAxes;
import game.scripts.imports.FlxScriptedColor;
import game.scripts.imports.FlxScriptedColor;
import game.scripts.imports.FlxTextScriptedBorderStyle;
import lime.app.Application;

class WebScripts
{
	static var moving:Bool = false;
	static var hisHead:FlxSprite;
	static var transitioning = false;
	static var haxenIdleStates = [];
	static var scanlineLayerOne:FlxSprite;
	static var scanlineLayerTwo:FlxSprite;
	static var scanlineAcceptedStates = ['desktop-main', 'desktop-play'];
	static var scanlineAngle = FlxG.random.float(0, 360);
	static var leftArrow:FlxSprite;
	static var rightArrow:FlxSprite;
	static var arrowsnotLeaving:Bool;
	static var savedSelection:Null<Int>;
	static var lvl:LevelModule;
	static var level_paused:Bool;
	static var lvl1_bg_sky:FlxSprite;
	static var lvl1_bg_ground:FlxSprite;
	static var haxen:FlxSprite;
	static var haxen_pos:Int;
	static var op:FlxSprite;
	static var op_attacking:Bool;
	static var hands:FlxTypedGroup<FlxSprite>;
	static var pauseBG:FlxSprite;
	static var tick = 0;
	static var levelTime = 0;
	static var levelTimer:FlxTimer;
	static var levelTimerText:FlxText;

	public static function onAdded(event:AddedEvent)
	{
		haxenIdleStates.push(Paths.getImagePath('desktop/haxen/idle-left'));
		haxenIdleStates.push(Paths.getImagePath('desktop/haxen/idle-right'));

		trace('Initalizing all level modules');
		DesktopPlay.initalizeLevelModules('game/levels/data');

		FlxG.save.bind('PersonalitiesHAXEN', 'Sphis');

		if (FlxG.save.data.levelTimes == null)
		{
			FlxG.save.data.levelTimes = {
				level1: 0
			}
		}
		if (FlxG.save.data.modList == null)
		{
			FlxG.save.data.modList = [];
		}
		ModList.load();

		trace('Save dump: ' + {modList: FlxG.save.data.modList, levelTimes: FlxG.save.data.levelTimes, volume: FlxG.save.data.volume});

		Application.current.onExit.add(l ->
		{
			FlxG.save.flush();
		});
	}

	public static function onCreate(event:CreateEvent)
	{
		moving = true;
		if (event.state == 'desktop-main')
		{
			var startingYPositions = [
				DesktopMain.instance.haxenStartingYPosition,
				DesktopMain.instance.option_play.getPosition().y,
				DesktopMain.instance.option_options.getPosition().y
			];

			DesktopMain.instance.haxen.y = FlxG.height + DesktopMain.instance.haxen.height;
			DesktopMain.instance.option_play.y = FlxG.height + DesktopMain.instance.option_play.height;
			DesktopMain.instance.option_options.y = FlxG.height + DesktopMain.instance.option_options.height;

			DesktopMain.instance.haxen.alpha = 0;
			DesktopMain.instance.option_play.alpha = 0;
			DesktopMain.instance.option_options.alpha = 0;

			FlxTween.tween(DesktopMain.instance.haxen, {alpha: 0.75, y: startingYPositions[0]}, 1, {
				ease: FlxEase.sineInOut,
				startDelay: 0.5,
				onComplete: _ ->
				{
					moving = false;
				}
			});

			FlxTween.tween(DesktopMain.instance.option_play, {alpha: 0.5, y: startingYPositions[1]}, 1, {
				ease: FlxEase.sineInOut,
				startDelay: 0.1,
			});
			FlxTween.tween(DesktopMain.instance.option_options, {alpha: 0.5, y: startingYPositions[2]}, 1, {
				ease: FlxEase.sineInOut
			});
		}

		if (event.state == 'z-easter-egg')
		{
			hisHead = new FlxSprite();
			hisHead.loadGraphic(Paths.getImagePath('desktop/easterEgg/hisHead'));
			FlxG.state.add(hisHead);
		}

		transitioning = false;

		if (event.state == 'z-easter-egg')
		{
			FlxG.camera.fade(FlxScriptedColor.BLACK, 1, true, null);
		}

		scanlineLayerOne = new FlxSprite();
		scanlineLayerOne.loadGraphic(Paths.getImagePath('LCD/scanlines'));
		scanlineLayerOne.screenCenter();
		scanlineLayerOne.scrollFactor.set(0, 0);

		scanlineLayerTwo = new FlxSprite();
		scanlineLayerTwo.loadGraphic(Paths.getImagePath('LCD/scanlines'));
		scanlineLayerTwo.screenCenter();
		scanlineLayerTwo.scrollFactor.set(0, 0);

		if (scanlineAcceptedStates.contains(event.state))
		{
			switch (event.state)
			{
				case 'desktop-main':
					DesktopMain.instance.scanlineLayer.add(scanlineLayerOne);
					DesktopMain.instance.scanlineLayer.add(scanlineLayerTwo);
				case 'desktop-play':
					DesktopPlay.instance.scanlineLayer.add(scanlineLayerOne);
					DesktopPlay.instance.scanlineLayer.add(scanlineLayerTwo);
			}
		}

		if (event.state == 'desktop-play')
		{
			var sysLoad = DesktopPlay.instance.sysLoadLevels('game/levels/data');

			if (!sysLoad)
			{
				DesktopPlay.instance.levels = ['level1'];
			}
		}

		if (event.state == 'desktop-play')
		{
			arrowsnotLeaving = true;
			leftArrow = new FlxSprite();
			leftArrow.loadGraphic(Paths.getImagePath('levels/desktop-icons/select-arrow'));
			leftArrow.flipX = true;

			leftArrow.scale.set(.25, .25);
			leftArrow.updateHitbox();

			leftArrow.screenCenter(FlxScriptedAxes.Y);
			leftArrow.x = 32;

			leftArrow.scrollFactor.set(0, 0);

			rightArrow = new FlxSprite();
			rightArrow.loadGraphic(Paths.getImagePath('levels/desktop-icons/select-arrow'));

			rightArrow.scale.set(.25, .25);
			rightArrow.updateHitbox();

			rightArrow.scrollFactor.set(0, 0);

			leftArrow.alpha = 0;
			rightArrow.alpha = 0;

			FlxTween.tween(leftArrow, {alpha: 1}, 1, {
				ease: FlxEase.sineInOut
			});
			FlxTween.tween(rightArrow, {alpha: 1}, 1, {
				ease: FlxEase.sineInOut
			});

			FlxG.state.add(leftArrow);
			FlxG.state.add(rightArrow);
		}

		if (event.state == 'desktop-play')
		{
			DesktopPlay.instance.reloadLevels((levelsGrp, levelsTextGrp) ->
			{
				for (obj in levelsGrp.members)
				{
					obj.levelIcon.alpha = 0;
					FlxTween.tween(obj.levelIcon, {alpha: obj.targAlpha}, 1, {
						ease: FlxEase.sineInOut
					});
					obj.lock.alpha = 0;
					FlxTween.tween(obj.lock, {alpha: 1}, 1, {
						ease: FlxEase.sineInOut
					});
				}
				for (obj in levelsTextGrp.members)
				{
					obj.alpha = 0;
					FlxTween.tween(obj, {alpha: 1}, 1, {
						ease: FlxEase.sineInOut
					});
				}
			});
		}

		if (event.state == 'desktop-play')
			savedSelection = null;

		if (event.state == 'level1')
		{
			lvl = new LevelModule(event.state);
			FlxG.camera.fade(FlxScriptedColor.BLACK, 1, true, () -> {});

			lvl1_bg_sky = new FlxSprite();
			lvl1_bg_sky.loadGraphic(lvl.getGeneralAsset('sky'));
			lvl1_bg_sky.screenCenter();

			lvl1_bg_ground = new FlxSprite();
			lvl1_bg_ground.loadGraphic(lvl.getGeneralAsset('ground'));
			lvl1_bg_ground.screenCenter();

			haxen = new FlxSprite();
			haxen.loadGraphic(lvl.getHaxenAsset('idle'));
			haxen.screenCenter();
			haxen.y += (haxen.height / 4);

			op = new FlxSprite();
			op.loadGraphic(lvl.getGeneralAsset('op'));
			op.screenCenter();
			op.y -= op.height / 10;
			var op_resting_YPos = op.getPosition().y;
			op.y = FlxG.height * 2;

			hands = new FlxTypedGroup();

			pauseBG = new FlxSprite();
			pauseBG.makeGraphic(FlxG.width, FlxG.height, FlxScriptedColor.BLACK);
			pauseBG.screenCenter();

			BlankState.instance.add(lvl1_bg_sky);

			BlankState.instance.add(op);

			BlankState.instance.add(lvl1_bg_ground);

			BlankState.instance.add(haxen);
			BlankState.instance.add(hands);

			BlankState.instance.add(pauseBG);

			op_attacking = false;
			FlxTween.tween(op, {y: op_resting_YPos}, 2, {
				ease: FlxEase.sineOut,
				onComplete: twn ->
				{
					if (tick < 175)
						tick = FlxG.random.int(175, 200);
					op_attacking = true;
				}
			});

			haxen_pos = 0;
		}

		level_paused = false;
		levelTime = 0;
		levelTimer = new FlxTimer();

		levelTimerText = new FlxText();
		levelTimerText.size = 16;
		levelTimerText.y = 32;
		levelTimerText.color = FlxScriptedColor.WHITE;
		levelTimerText.setBorderStyle(FlxTextScriptedBorderStyle.OUTLINE, FlxScriptedColor.BLACK, 2);
		levelTimerText.alpha = 0.75;

		if (event.state == 'level1')
		{
			levelTimer.start(1, tmr ->
			{
				levelTime += 1;

				if (FlxG.save.data.levelTimes.level1 != null)
				{
					if (levelTime > FlxG.save.data.levelTimes.level1)
						FlxG.save.data.levelTimes.level1 = levelTime;
				}
			}, 0);

			FlxG.state.add(levelTimerText);
		}

		if (event.state == 'desktop-main')
		{
			if (!moving)
			{
				DesktopMain.instance.option_play.alpha = 0.5;
				DesktopMain.instance.option_options.alpha = 0.5;
			}

			if (Mouse.overlaps(DesktopMain.instance.option_play))
			{
				if (!moving)
					DesktopMain.instance.option_play.alpha = 1;

				if (Mouse.justReleased && !moving)
				{
					FlxTimer.globalManager.clear();
					DesktopMain.instance.haxen_changeState('accept');
					moving = true;
					DesktopMain.instance.haxen.x -= (DesktopMain.instance.haxen.width / 10);
					DesktopMain.instance.haxen.y -= (DesktopMain.instance.haxen.height / 20);

					FlxTween.tween(DesktopMain.instance.haxen, {alpha: 1, y: FlxG.height + DesktopMain.instance.haxen.height}, 1, {
						ease: FlxEase.sineInOut,
						startDelay: 0.5,
						onComplete: tween ->
						{
							FlxG.switchState(() -> new DesktopPlay());
						}
					});

					FlxTween.tween(DesktopMain.instance.option_play, {alpha: 1, y: FlxG.height + DesktopMain.instance.option_play.height}, 1, {
						ease: FlxEase.sineInOut,
						startDelay: 0.1,
					});
					FlxTween.tween(DesktopMain.instance.option_options, {alpha: 1, y: FlxG.height + DesktopMain.instance.option_options.height}, 1, {
						ease: FlxEase.sineInOut
					});
				}
			}
			else if (Mouse.overlaps(DesktopMain.instance.option_options))
			{
				if (!moving)
				{
					DesktopMain.instance.option_options.alpha = 0.25;

					if (Mouse.pressed)
					{
						DesktopMain.instance.option_options.alpha = 0.125;
					}
				}
			}
		}
	}

	public static function onUpdate(event:UpdateEvent)
	{
		if (Controls.getControlJustReleased('ui_leave') && event.state == 'z-easter-egg')
		{
			FlxG.switchState(() -> new DesktopMain());
		}

		if (!transitioning && (Controls.getControlJustReleased('general_openEasterEggMenu')))
		{
			if (event.state != 'z-easter-egg')
			{
				transitioning = true;

				if (event.state == 'desktop-main' || event.state == 'desktop-play')
				{
					FlxG.camera.fade(FlxScriptedColor.BLACK, 1, false, () ->
					{
						FlxG.switchState(() -> new BlankState('z-easter-egg'));
					});
				}
				else
					FlxG.switchState(() -> new BlankState('z-easter-egg'));
			}
		}

		if (event.state == 'desktop-main')
		{
			if (DesktopMain.instance.haxen.y == DesktopMain.instance.haxenStartingYPosition)
				DesktopMain.instance.haxen.alpha = 0.75;
			if (Mouse.overlaps(DesktopMain.instance.haxen) && DesktopMain.instance.haxen.y == DesktopMain.instance.haxenStartingYPosition)
			{
				DesktopMain.instance.haxen.alpha = 1;

				if (Mouse.justReleased && haxenIdleStates.contains(DesktopMain.instance.haxen.graphic.key))
				{
					DesktopMain.instance.haxen_changeState('boop');
					new FlxTimer().start(1, function(tmr)
					{
						DesktopMain.instance.haxen_idle();
					});
				}
			}
		}

		if (scanlineLayerOne != null)
		{
			scanlineAngle += (1 / FlxG.random.int(10, 100));
			scanlineLayerOne.angle = scanlineAngle;
			scanlineLayerOne.alpha = FlxG.random.float(0, 0.2);
			scanlineLayerTwo.angle = scanlineAngle + 90;
			scanlineLayerTwo.alpha = scanlineLayerOne.alpha;
		}

		if (event.state == 'desktop-play')
		{
			if (leftArrow != null && rightArrow != null)
			{
				leftArrow.scale.set(.25, .25);
				rightArrow.scale.set(.25, .25);

				if (arrowsnotLeaving)
				{
					if (DesktopPlay.instance.curSel >= 0)
						leftArrow.alpha = .5;
					else
						leftArrow.alpha = 1;
					if (DesktopPlay.instance.curSel <= DesktopPlay.instance.levels.length - 1)
						rightArrow.alpha = .5;
					else
						rightArrow.alpha = 1;
				}

				if (Controls.getControlPressed('ui_left') && arrowsnotLeaving)
				{
					if (DesktopPlay.instance.curSel > 0)
						leftArrow.scale.set(.3, .15);
					else
						leftArrow.scale.set(.15, .3);
				}
				if (Controls.getControlPressed('ui_right') && arrowsnotLeaving)
				{
					if (DesktopPlay.instance.curSel < DesktopPlay.instance.levels.length - 1)
						rightArrow.scale.set(.3, .15);
					else
						rightArrow.scale.set(.15, .3);
				}
				if (arrowsnotLeaving && Controls.getControlJustReleased('ui_leave'))
				{
					arrowsnotLeaving = false;

					FlxTween.tween(leftArrow, {alpha: 0}, 1, {
						ease: FlxEase.sineInOut
					});
					FlxTween.tween(rightArrow, {alpha: 0}, 1, {
						ease: FlxEase.sineInOut
					});
				}
				if (arrowsnotLeaving)
				{
					rightArrow.screenCenter(FlxScriptedAxes.Y);
					rightArrow.x = FlxG.width - rightArrow.width - 32;
				}
			}
		}

		if ((savedSelection == null) && event.state == 'desktop-play' && Controls.getControlJustReleased('ui_leave'))
		{
			savedSelection = DesktopPlay.instance.curSel;
			for (obj in DesktopPlay.instance.levelsGrp.members)
			{
				FlxTween.tween(obj.levelIcon, {alpha: 0}, 1, {
					ease: FlxEase.sineInOut
				});
				FlxTween.tween(obj.lock, {alpha: 0}, 1, {
					ease: FlxEase.sineInOut
				});
			}
			for (obj in DesktopPlay.instance.levelsTextGrp.members)
			{
				FlxTween.tween(obj, {alpha: 0}, 1, {
					ease: FlxEase.sineInOut
				});
			}

			new FlxTimer().start(1, tmr ->
			{
				savedSelection = null;
				FlxG.switchState(() -> new DesktopMain());
			});
		}

		if (savedSelection != null && DesktopPlay.instance.curSel != savedSelection)
			DesktopPlay.instance.curSel = savedSelection;

		if (event.state == 'desktop-play')
		{
			if (Controls.getControlJustReleased('ui_left'))
				DesktopPlay.instance.curSel--;
			if (Controls.getControlJustReleased('ui_right'))
				DesktopPlay.instance.curSel++;

			if (DesktopPlay.instance.curSel < 0)
				DesktopPlay.instance.curSel = 0;
			if (DesktopPlay.instance.curSel >= DesktopPlay.instance.levels.length)
				DesktopPlay.instance.curSel = DesktopPlay.instance.levels.length - 1;
		}

		if (event.state == 'desktop-play')
		{
			for (levelGrp in DesktopPlay.instance.levelsGrp.members)
			{
				levelGrp.levelIcon.screenCenter(FlxScriptedAxes.Y);
				DesktopPlay.instance.levelsTextGrp.members[levelGrp.ID].y = levelGrp.levelIcon.y
					- DesktopPlay.instance.levelsTextGrp.members[levelGrp.ID].height;

				levelGrp.update(event.elapsed);

				levelGrp.levelIcon.color = 0xFFFFFF;
				if (DesktopPlay.instance.curSel == levelGrp.ID)
				{
					DesktopPlay.instance.camFollow.x = levelGrp.levelIcon.getGraphicMidpoint().x;
					levelGrp.levelIcon.color = 0xFFFF00;
				}

				DesktopPlay.instance.levelsTextGrp.members[levelGrp.ID].color = levelGrp.levelIcon.color;
			}
		}

		if (savedSelection != null && DesktopPlay.instance.curSel != savedSelection && event.state == 'desktop-play')
			DesktopPlay.instance.curSel = savedSelection;

		if ((savedSelection == null) && event.state == 'desktop-play')
		{
			if (Controls.getControlJustReleased('ui_accept'))
			{
				if (DesktopPlay.instance.levelMetas[DesktopPlay.instance.curSel].unlocked)
				{
					savedSelection = DesktopPlay.instance.curSel;

					var id = '';
					if (DesktopPlay.instance.levelMetas[savedSelection].id != null)
						id = DesktopPlay.instance.levelMetas[savedSelection].id;
					else
						id = DesktopPlay.instance.levels[savedSelection];

					FlxG.camera.fade(FlxScriptedColor.BLACK, 1, false, () ->
					{
						FlxG.switchState(() -> new BlankState(id));
					});
				}
			}
		}

		if (tick == null)
			tick = -1;
		tick += 1;

		FlxG.watch.addQuick('tick', tick);

		if (event.state == 'level1')
		{
			haxen.screenCenter();
			haxen.y += (haxen.height / 2);
			switch (haxen_pos)
			{
				case 1:
					haxen.x += haxen.width;
				case -1:
					haxen.x -= haxen.width;
			}

			if (Controls.getControlPressed('game_left') && !level_paused)
			{
				haxen.loadGraphic(lvl.getHaxenAsset('left'));
			}

			if (Controls.getControlPressed('game_right') && !level_paused)
			{
				haxen.loadGraphic(lvl.getHaxenAsset('right'));
			}

			if (Controls.getControlJustReleased('game_left') && !level_paused)
			{
				haxen_pos -= 1;
				haxen_pos = (haxen_pos < -1) ? -1 : haxen_pos;

				haxen.loadGraphic(lvl.getHaxenAsset('idle'));
			}

			if (Controls.getControlJustReleased('game_right') && !level_paused)
			{
				haxen_pos += 1;
				haxen_pos = (haxen_pos > 1) ? 1 : haxen_pos;

				haxen.loadGraphic(lvl.getHaxenAsset('idle'));
			}

			pauseBG.alpha = (level_paused) ? 0.5 : 0.0;

			if (op_attacking && !level_paused)
			{
				if ((tick >= 200 && !FlxG.random.bool(FlxG.random.float(0, 10))) && hands.members.length < 3)
				{
					var newTickMin = 0;

					switch (hands.members.length)
					{
						case 3:
							newTickMin = 0;
						case 2:
							newTickMin = 50;
						case 1:
							newTickMin = 125;
						case 0:
							newTickMin = 175;
					}

					tick = FlxG.random.int(newTickMin, 300);
					trace('spawn lvl 1 hand');

					var hand = new FlxSprite();
					hand.loadGraphic(lvl.getHandAsset('clench'));
					hand.setPosition(haxen.x, haxen.y);
					hand.alpha = 0;

					FlxTween.tween(hand, {alpha: 1, y: hand.y - (hand.height * 2)}, .25, {
						ease: FlxEase.sineOut,
						onComplete: twn ->
						{
							new FlxTimer().start(.25, tmr ->
							{
								FlxTween.tween(hand, {y: haxen.y}, .25, {
									ease: FlxEase.sineIn,
									onComplete: twn ->
									{
										new FlxTimer().start(.25, tmr ->
										{
											FlxTween.tween(hand, {alpha: 0}, .25, {
												ease: FlxEase.sineOut,
												onComplete: twn ->
												{
													hand.destroy();
													hands.members.remove(hand);
												}
											});
										});
									},
									onUpdate: twn ->
									{
										if (hand.overlaps(haxen))
										{
											FlxG.switchState(() -> new DesktopPlay());
										}
									}
								});
							});
						}
					});

					hands.add(hand);
				}
			}

			if (Controls.getControlJustReleased('ui_leave') && level_paused)
			{
				FlxG.camera.fade(FlxScriptedColor.BLACK, 1, false, () ->
				{
					FlxG.switchState(() -> new DesktopPlay());
				});
			}
			if (Controls.getControlJustReleased('game_pause'))
			{
				level_paused = !level_paused;
			}
		}

		if (Controls.getControlJustReleased('general_openModMenu'))
			if (event.state == 'desktop-main' || event.state == 'desktop-play' && !ScriptManager.isWeb)
				FlxG.switchState(() -> new ModMenu());

		Mouse.setMouseState(MouseStates.IDLE);

		if (event.state == 'desktop-main' && DesktopMain.instance.haxen.y == DesktopMain.instance.haxenStartingYPosition)
		{
			if (Mouse.overlaps(DesktopMain.instance.option_play))
				Mouse.setMouseState(MouseStates.CAN_SELECT);
			if (Mouse.overlaps(DesktopMain.instance.haxen))
				Mouse.setMouseState(MouseStates.CAN_SELECT);

			if (Mouse.overlaps(DesktopMain.instance.option_options))
				Mouse.setMouseState(MouseStates.CANT_SELECT);
		}
		if (event.state == 'desktop-play' || event.state == 'level1' || event.state == 'level2' || event.state == 'modmenu')
		{
			Mouse.setMouseState(MouseStates.BLANK);
		}

		if (Mouse.pressed && Mouse.state == MouseStates.CAN_SELECT)
		{
			Mouse.setMouseState(MouseStates.SELECTED);
		}

		if (Controls.getControlJustReleased('general_reload'))
		{
			ScriptManager.checkForUpdatedScripts();
		}

		levelTimerText.text = '' + levelTime;
		levelTimerText.screenCenter(FlxScriptedAxes.X);

		if (levelTimer.active)
		{
			if (event.state == 'level1')
			{
				if (FlxG.save.data.levelTimes.level1 != null)
				{
					levelTimerText.text += ' (best: ' + FlxG.save.data.levelTimes.level1 + ')';
				}
			}

			if (Controls.getControlJustReleased('ui_leave') && level_paused)
			{
				FlxG.save.flush();
			}
			if (Controls.getControlJustReleased('game_pause'))
			{
				level_paused = !level_paused;
			}
		}
	}
}
